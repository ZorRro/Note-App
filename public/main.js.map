{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/auth/app-login.component.html","webpack:///./src/app/auth/app-login.component.ts","webpack:///./src/app/auth/app-signup.component.html","webpack:///./src/app/auth/app-signup.component.ts","webpack:///./src/app/service/auth.service.ts","webpack:///./src/app/user/user-dashboard/user-dashboard.component.css","webpack:///./src/app/user/user-dashboard/user-dashboard.component.html","webpack:///./src/app/user/user-dashboard/user-dashboard.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AppLoginComponent } from './auth/app-login.component';\nimport { AppSignupComponent } from './auth/app-signup.component';\nimport { AppComponent } from './app.component';\nimport { UserDashboardComponent } from './user/user-dashboard/user-dashboard.component';\n\nconst routes: Routes = [\n  {path: 'auth/login', component: AppLoginComponent},\n  {path: 'auth/signup', component: AppSignupComponent},\n  {path: 'user/:id', component: UserDashboardComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<section id=\\\"header\\\">\\n    <nav class=\\\"navbar navbar-expand-md navbar-light bg-light\\\">\\n        <a class=\\\"navbar-brand\\\" href=\\\"#\\\">\\n            <h2>\\n                Note\\n            </h2>\\n        </a>\\n        <button class=\\\"navbar-toggler d-lg-none\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapsibleNavId\\\" aria-controls=\\\"collapsibleNavId\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n      <span class=\\\"navbar-toggler-icon\\\"></span>\\n    </button>\\n        <div class=\\\"collapse navbar-collapse\\\" id=\\\"collapsibleNavId\\\">\\n            <ul class=\\\"navbar-nav mr-auto mt-2 mt-lg-0\\\">\\n                <li class=\\\"nav-item active\\\">\\n                    <a class=\\\"nav-link\\\" href=\\\"#\\\">Home <span class=\\\"sr-only\\\">(current)</span></a>\\n                </li>\\n                <li class=\\\"nav-item\\\">\\n                    <a class=\\\"nav-link\\\" href=\\\"#\\\">Dashboard</a>\\n                </li>\\n                <li class=\\\"nav-item dropdown\\\">\\n                    <a class=\\\"nav-link dropdown-toggle\\\" href=\\\"#\\\" id=\\\"dropdownId\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">Dropdown</a>\\n                    <div class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdownId\\\">\\n                        <a class=\\\"dropdown-item\\\" href=\\\"#\\\">Action 1</a>\\n                        <a class=\\\"dropdown-item\\\" href=\\\"#\\\">Action 2</a>\\n                    </div>\\n                </li>\\n            </ul>\\n            <div class=\\\"button-group\\\">\\n                <a *ngIf=\\\"!authService.getLoginState()\\\" [routerLink]=\\\"['auth/signup']\\\">\\n                    <button class=\\\"btn btn-primary mr-2\\\">Signup</button>\\n                </a>\\n                <a *ngIf=\\\"!authService.getLoginState()\\\" [routerLink]=\\\"['auth/login']\\\">\\n                    <button class=\\\"btn btn-outline-success mr-2\\\">Login</button>\\n                </a>\\n                <button *ngIf=\\\"authService.getLoginState()\\\" class=\\\"btn btn-outline-danger mr-2\\\">Logout</button>\\n            </div>\\n        </div>\\n    </nav>\\n</section>\\n\\n\\n<router-outlet></router-outlet>\"","import { Component } from '@angular/core';\nimport { AuthService } from './service/auth.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  constructor(public authService: AuthService) {\n\n  }\n  title = 'note-app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { FormsModule } from '@angular/forms'\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { AppLoginComponent } from './auth/app-login.component';\nimport { AppSignupComponent } from './auth/app-signup.component';\nimport { AuthService } from './service/auth.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { UserDashboardComponent } from './user/user-dashboard/user-dashboard.component';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AppLoginComponent,\n    AppSignupComponent,\n    UserDashboardComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<section id=\\\"login\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"row justify-content-center align-items-center\\\">\\r\\n            <form class=\\\"col-md-5 mt-5\\\" #loginForm=\\\"ngForm\\\" (ngSubmit)=\\\"onLoginSubmit(loginForm)\\\">\\r\\n\\r\\n                <div *ngIf=\\\"loginMessage\\\" class=\\\"alert alert-danger alert-dismissible fade show\\\" role=\\\"alert\\\">\\r\\n                    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\" aria-label=\\\"Close\\\">\\r\\n                  <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n                </button>\\r\\n                    <strong>{{ loginMessage }}</strong>\\r\\n                </div>\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"username\\\">Username</label>\\r\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" ngModel name=\\\"username\\\" id=\\\"username\\\" placeholder=\\\"John Doe\\\">\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"password\\\">Password</label>\\r\\n                    <input type=\\\"password\\\" class=\\\"form-control\\\" ngModel name=\\\"password\\\" id=\\\"password\\\">\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <button type=\\\"submit\\\" class=\\\"btm btn-primary mr-2\\\"> Login </button>\\r\\n                    <button type=\\\"reset\\\" class=\\\"btm btn-warning mr-2\\\"> Reset </button>\\r\\n                </div>\\r\\n            </form>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</section>\\r\\n\\r\\n\\r\\n<!--\\r\\n\\r\\n\\r\\n\\r\\n -->\"","import { Component } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { AuthService } from '../service/auth.service';\r\nimport { User } from '../model/user.model';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './app-login.component.html'\r\n})\r\nexport class AppLoginComponent {\r\n  loginMessage: string;\r\n  constructor(private authService: AuthService, private router: Router) { }\r\n\r\n  onLoginSubmit(loginForm: NgForm) {\r\n    const loginUser: any = {};\r\n    loginUser.username = loginForm.value.username;\r\n    loginUser.password = loginForm.value.password;\r\n    console.log(loginUser);\r\n\r\n    this.authService.doLogin(loginUser)\r\n      .subscribe( response => {\r\n          if (response.status === 200 ) {\r\n            console.log(response.body);\r\n            const userToken = response.body['token'];\r\n            const userId = response.body['id'];\r\n            localStorage.setItem('token', userToken);\r\n            this.authService.updateUserStatus(userId);\r\n            this.router.navigate(['user', userId]);\r\n          }\r\n        },\r\n        err => {\r\n          this.loginMessage = 'Login Failed. ';\r\n          console.error(err);\r\n          if (err.error.message) {\r\n            this.loginMessage += err.error.message;\r\n          }\r\n        }\r\n      );\r\n  }\r\n}\r\n","module.exports = \"<section id=\\\"login\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"row justify-content-center align-items-center\\\">\\r\\n            <form class=\\\"col-md-5 mt-5\\\">\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"name\\\">Name</label>\\r\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"name\\\" id=\\\"name\\\" placeholder=\\\"John Doe\\\">\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"username\\\">Username</label>\\r\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"username\\\" id=\\\"username\\\" placeholder=\\\"\\\">\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"password\\\">Password</label>\\r\\n                    <input type=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\" id=\\\"password\\\">\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"email\\\">email</label>\\r\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"email\\\" id=\\\"email\\\">\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <button type=\\\"submit\\\" class=\\\"btm btn-primary mr-2\\\"> Signup </button>\\r\\n                    <button type=\\\"reset\\\" class=\\\"btm btn-warning mr-2\\\"> Reset </button>\\r\\n                </div>\\r\\n            </form>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</section>\\r\\n\\r\\n\\r\\n<!--\\r\\n\\r\\n\\r\\n\\r\\n -->\\r\\n\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './app-signup.component.html'\r\n})\r\nexport class AppSignupComponent {\r\n  constructor() { }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { User } from '../model/user.model';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  // private requestUri = 'http://localhost:3090/auth/login';\r\n  private requestUri = 'auth/login';\r\n  private isLoggedIn = false;\r\n  private userId: string;\r\n  constructor(private httpClient: HttpClient) {\r\n\r\n  }\r\n\r\n  public doLogin(userData) {\r\n    return this.httpClient.post(this.requestUri, userData, { observe: 'response' });\r\n  }\r\n\r\n  public doLogout() {\r\n    if ( localStorage.getItem('token')) {\r\n      localStorage.removeItem('token');\r\n      this.updateUserStatus(this.userId);\r\n    }\r\n    return true;\r\n  }\r\n  public getLoginState() {\r\n    return this.isLoggedIn;\r\n  }\r\n\r\n  private setLoginState(state: boolean) {\r\n    this.isLoggedIn = state;\r\n  }\r\n\r\n\r\n  updateUserStatus(userId: string) {\r\n    if (localStorage.getItem('token')) {\r\n      this.setLoginState(true);\r\n      this.userId = userId;\r\n    } else {\r\n      this.setLoginState(false);\r\n      this.userId = '';\r\n    }\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3VzZXIvdXNlci1kYXNoYm9hcmQvdXNlci1kYXNoYm9hcmQuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<p>\\n  user-dashboard-component works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user-dashboard',\n  templateUrl: './user-dashboard.component.html',\n  styleUrls: ['./user-dashboard.component.css']\n})\nexport class UserDashboardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}